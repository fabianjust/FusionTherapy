%emg_data
%
%Created by David Mauderli - 2019
%
%DESCRIPTION: This class simulates EMG measurments as generated by the
%Noraxon EMG measurment system
%
%USAGE:
%   1.) Specify measurment time and sampling frequency by constructor
%   2.) Simulate emg signals with simulate()
%   3.) Save emg signals with save()

classdef emg_plt < handle
    
    properties (Access = 'private')
        %Figure objects
        figh
        ploth = {}
        axh = gobjects(0,0);
        legtext = {}
        colormap =    lines(20);
        makeLegend = [];
        %Flags
        repetitionFlag = false;
        compFlag = false;
        
        
        %Subject info
        subject
        PATH
    end
    
    methods (Access = 'public')
        
        %% Constructor: load measurment file
        function obj = emg_plt(SUBJECT)
            if nargin == 1
                if isstruct(SUBJECT)
                    obj.subject = SUBJECT
                else
                    load(SUBJECT,'subject')
                    obj.subject = subject;
                end
            elseif nargin == 0
                [FNAME, FOLDER, ~] = uigetfile('Select Subject File')
                SUBJECT = [FOLDER,'\',FNAME];
                load(SUBJECT,'subject');
                obj.subject = subject;
            end
            tempPath = strsplit(SUBJECT,'\');
            obj.PATH = strjoin(tempPath(1:(end-2)),'\');
            
            figh = figure();
            set(figh,'Visible','off');
        end
            
        %% plot_raw_conditions: 
        function obj = plotRaw(obj,n_mov, n_con, n_mus, bool_SRE, bool_startstop)
            
            %If Input 2-4 have wrong type: convert
            if iscell(n_mov)
                n_mov = n_mov{1};
            end
            
            if ~iscell(n_con)
                n_con = {n_con};
            end
            
            if iscell(n_mus)
                n_mus = n_mus{1};
            end
            
            %Append axes to current axes vector
            i_ax = length(obj.axh)+1;
            obj.axh(i_ax) = axes();
            
            %Plot each condition in n_con
            for j_line = 1:length(n_con)
                %Get indice for condition (convention!)
                i_con = get_icon(n_con{j_line});
                
                % Load proper EMG file
                CURRENT_EMG = [obj.PATH,'\emg\emg_',n_mov,'_',n_con{j_line},...
                    '_S',obj.subject.metainfo.snum,'.mat'];
                emg_data = load_emg(CURRENT_EMG);
                if(bool_SRE)
                    emg_data = emg_SRE(emg_data);
                end

                % Extract relevant Data
                i_mus = get_imus(n_mus);
                y_data = emg_data.data(:,i_mus);
                x_data = linspace(0,length(y_data)/emg_data.fs,length(y_data));

                % Plot EMG data
                obj.ploth{i_ax,j_line} = line(obj.axh(i_ax),x_data,y_data,'Color',obj.colormap(i_con,:));
                xlabel('Time [s]')
                if bool_SRE
                    ylabel('Smoothed Rectified EMG Signal [\mu V]')
                else
                    ylabel('EMG Signal [\mu V]')
                end

                %Indicate start/stop positions if bool_startstop flag set
                if bool_startstop
                    try
                        start_times = ...
                            [obj.subject.movement(get_imov(n_mov)).condition(i_con).repetition.t_start];
                        stop_times = ...
                            [obj.subject.movement(get_imov(n_mov)).condition(i_con).repetition.t_stop];
                        start_amplitudes = y_data(floor(start_times*emg_data.fs));
                        stop_amplitudes = y_data(floor(stop_times*emg_data.fs));
                        hold on
                        scatter(obj.axh(i_ax),start_times,start_amplitudes,60,'MarkerEdgeColor',obj.colormap(i_con,:),'MarkerFaceColor',obj.colormap(i_con,:),'Marker','o');
                        scatter(obj.axh(i_ax),stop_times,stop_amplitudes,60,'MarkerEdgeColor',obj.colormap(i_con,:),'MarkerFaceColor',obj.colormap(i_con,:),'Marker','s');
                        hold off
                    catch
                        warning('Could not plot start/stop indices')
                    end
                end

                % Add title and legend
                if bool_SRE
                    title([ 'Raw SRE EMG Data', newline,...
                            obj.getFullName(n_mov),' - ',obj.getFullName(n_mus)],...
                            'Interpreter','none')
                else
                    title([ 'Raw EMG Data', newline,...
                            obj.getFullName(n_mov),' - ',obj.getFullName(n_mus)],...
                            'Interpreter','none')
                end
                obj.legtext{i_ax,j_line} = obj.getFullName(n_con{j_line});
            end
            obj.makeLegend(i_ax) = true;
            end
        
        
        %% plot_repetitions
        function obj = plotRep(obj, n_mov, n_con, n_mus, boolResized, boolMvc, boolMean, boolCfi)

        %Check input parameters
        if (~boolResized)&&(boolMean||boolCfi)
            boolResized = true
            warning('Cannot plot mean & cfi without resizing. boolResized was set to true automatically!')
        end
        
        if iscell(n_mov)
            n_mov = n_mov{1};
        end
        
        if iscell(n_mus)
            n_mus = n_mus{1};
        end
        
        % Create new axes for every condition
        i_mus = get_imus(n_mus);
        i_mov = get_imov(n_mov);
        for j_con=1:length(n_con)
            i_con = get_icon(n_con{j_con});
            
            % Create new axes
            i_ax = length(obj.axh)+1;
            obj.axh(i_ax) = axes();
            
            % Determine y axis norm factor (MVC Yes/No)
            if boolMvc %Mvc norm
                mvcVal = obj.subject.muscle_info(i_mus).mvc;
                yLabelText = 'MVC normed EMG Potential';
            else
                mvcVal = 1;
                yLabelText = 'EMG Potential [\mu V]';
            end
            
            %Plot all repetitions (time normed/mvc normed if specified)
            current_record = obj.subject.movement(i_mov).condition(i_con).repetition;
            plot_counter = 0;
            for i_rep = 1:length(current_record)
                %Collect x/y data
                if boolResized %Time norm
                    y_data = current_record(i_rep).emg_resized(:,i_mus)/mvcVal;
                    x_data = linspace(0,100,length(y_data));
                    xLabelText = 'Time [%]';
                    
                else %Original Time
                    y_data = current_record(i_rep).emg_SRE(:,i_mus)/mvcVal;
                    x_data = linspace(0,length(y_data)/current_record(i_rep).emgraw_Fs,length(y_data));
                    xLabelText = 'Time [s]';
                end
                %Plot
                plot_counter = plot_counter+1;
                obj.ploth{i_ax,plot_counter} = line(obj.axh(i_ax),x_data,y_data,...
                    'Color',obj.colormap(i_rep,:),'LineStyle',':');
                obj.legtext{i_ax,plot_counter} = ['Repetition ',num2str(i_rep)];
            end
            
            %Plot mean curve
            if boolMean
                %collect x/y data
                y_data = obj.subject.movement(i_mov).condition(i_con).emg_mean(:,i_mus)/mvcVal;
                x_data = linspace(0,100,length(y_data));
                %Plot
                plot_counter = plot_counter+1;
                obj.ploth{i_ax,plot_counter} = line(obj.axh(i_ax),x_data,y_data,...
                    'Color','Red','LineStyle','-','LineWidth',2);
                obj.legtext{i_ax,plot_counter} = 'Mean of Repetitions';
            end
            %Plot Interval of Confidence
            if boolCfi
                %collect x/y data
                y_data = obj.subject.movement(i_mov).condition(i_con).emg_mean(:,i_mus);
                cfi_width = obj.subject.movement(i_mov).condition(i_con).emg_cfiwidth(:,i_mus);
                y_low = (y_data-cfi_width)/mvcVal;
                y_high = (y_data+cfi_width)/mvcVal;
                x_data = linspace(0,100,length(y_data));
                %Plot
                plot_counter = plot_counter+1;
                obj.ploth{i_ax,plot_counter} = line(obj.axh(i_ax),x_data,y_low,...
                    'Color','Red','LineStyle','--','LineWidth',1.5);
                line(obj.axh(i_ax),x_data,y_high,...
                    'Color','Red','LineStyle','--','LineWidth',1.5);
                obj.legtext{i_ax,plot_counter} = 'Interval of confidence';
            end
            
            %Title
            title(['All Repetitions:', newline, obj.getFullName(n_mov), ', ',...
                    obj.getFullName(n_con{j_con}), ', ', obj.getFullName(n_mus)])
            xlabel(xLabelText); ylabel(yLabelText);
            
            %Legend Flag
            if ~obj.repetitionFlag 
                obj.makeLegend(i_ax) = true;
                obj.repetitionFlag = true;
            else
                obj.makeLegend(i_ax) = false;
            end
        end
        end
        
        %% compare conditions
        function obj = plotComp(obj,n_mov,n_mus, boolBaseline)
        
        %Append axes to current axes vector
        i_ax = length(obj.axh)+1;
        obj.axh(i_ax) = axes();
        
        %Get indices regarding convention
        i_mov = get_imov(n_mov);
        i_mus = get_imus(n_mus);
        
        %Gather data
        if boolBaseline %If baseline flag: take corresponding data
            data_con = obj.subject.primaryOutcome(i_mov).meanMVC_con(:,i_mus);
            data_rob = obj.subject.primaryOutcome(i_mov).meanMVC_rob(:,i_mus);
            data_bri = obj.subject.primaryOutcome(i_mov).meanMVC_bri(:,i_mus);
            titleText = ['Condition Comparison with Baseline',newline,...
                obj.getFullName(n_mov),', ',obj.getFullName(n_mus)];
        else %Else: Take data without baseline subtractopm
            valMVC = obj.subject.muscle_info(i_mus).mvc; %This data is NOT mvc normed --> norm
            current_mov = obj.subject.movement(i_mov).condition;
            data_con = current_mov(get_icon('cont')).emg_mean(:,i_mus)/valMVC;
            data_rob = current_mov(get_icon('robt')).emg_mean(:,i_mus)/valMVC;
            data_bri = current_mov(get_icon('bri')).emg_mean(:,i_mus)/valMVC;
            titleText = ['Condition Comparison without Baseline',newline,...
                obj.getFullName(n_mov),', ',obj.getFullName(n_mus)];
        end
        %Gather interval of confidence data
        cfiWidth_con = obj.subject.primaryOutcome(i_mov).cfiMVC_con(:,i_mus);
        cfiWidth_rob = obj.subject.primaryOutcome(i_mov).cfiMVC_rob(:,i_mus);
        cfiWidth_bri = obj.subject.primaryOutcome(i_mov).cfiMVC_bri(:,i_mus);
        %X axis: 0-100%
        data_x = linspace(0,100,length(data_con));
        
        %Plot mean's and add legend description
        obj.ploth{i_ax,1} = line(obj.axh(i_ax),...
            data_x,data_con,'Color',[1,215/255,0],'LineStyle','-','LineWidth',1.5);
        obj.legtext{i_ax,1} = 'Conventional Therapy Mean';
        
        obj.ploth{i_ax,2} = line(obj.axh(i_ax),...
            data_x,data_rob,'Color',[135/255,206/255,250/255],'LineStyle','-','LineWidth',1.5);
        obj.legtext{i_ax,2} = 'Teach Therapy Mean';
        
        obj.ploth{i_ax,3} = line(obj.axh(i_ax),...
            data_x,data_bri,'Color','Black','LineStyle','-','LineWidth',1.5);
        obj.legtext{i_ax,3} = 'BridgeT Mean';
        
        %Plot intervals of confidence and add legend description
        obj.ploth{i_ax,4} = line(obj.axh(i_ax),...
            data_x,data_con+cfiWidth_con,'Color',[1,215/255,0],'LineStyle','--','LineWidth',1);
        line(obj.axh(i_ax),data_x,data_con-cfiWidth_con,...
            'Color',[1,215/255,0],'LineStyle','--','LineWidth',1);
        obj.legtext{i_ax,4} = 'Conventional Therapy Interval of Confidence';
        
        obj.ploth{i_ax,5} = line(obj.axh(i_ax),...
            data_x,data_rob+cfiWidth_rob,'Color',[135/255,206/255,250/255],'LineStyle','--','LineWidth',1);
        line(obj.axh(i_ax),data_x,data_rob-cfiWidth_rob,...
            'Color',[135/255,206/255,250/255],'LineStyle','--','LineWidth',1);
        obj.legtext{i_ax,5} = 'Teach Therapy Interval of Confidence';
        
        obj.ploth{i_ax,6} = line(obj.axh(i_ax),...
            data_x,data_bri+cfiWidth_bri,'Color','Black','LineStyle','--','LineWidth',1);
        line(obj.axh(i_ax),data_x,data_bri-cfiWidth_bri,...
            'Color','Black','LineStyle','--','LineWidth',1);
        obj.legtext{i_ax,6} = 'BridgeT Interval of Confidence';    
        
        %Set legend flag (causes legend for the same plot to occur only
        %once in a figure)
        if ~obj.compFlag 
            obj.makeLegend(i_ax) = true;
            obj.compFlag = true;
        else
            obj.makeLegend(i_ax) = false;
        end
        title(titleText);
        ylabel('MVC normed EMG Activity'); xlabel('Time [%]');
        end
        
        %% Visualize Dynamic Time Warping Result
        function obj = plotDTW(obj,n_mov, n_mus, type, boolDeform)
            %Append axes to current axes vector
            i_ax = length(obj.axh)+1;
            obj.axh(i_ax) = axes();

            %Get indices regarding convention
            i_mov = get_imov(n_mov);
            i_mus = get_imus(n_mus);
            
            switch type
                case 'rc'
                    data_y1 = obj.subject.primaryOutcome(i_mov).meanMVC_con(:,i_mus);
                    data_y2 = obj.subject.primaryOutcome(i_mov).meanMVC_rob(:,i_mus);
                    ind_y2 = obj.subject.primaryOutcome(i_mov).errorIndicesDtwRC;
                    legTextY1 = 'Mean Conventional Therapy';
                    legTextY2 = 'Mean Teach Therapy';
                    legTextW  = 'Warped Mean Teach Therapy';
                case 'bc'
                    data_y1 = obj.subject.primaryOutcome(i_mov).meanMVC_con(:,i_mus);
                    data_y2 = obj.subject.primaryOutcome(i_mov).meanMVC_bri(:,i_mus);
                    ind_y2 = obj.subject.primaryOutcome(i_mov).errorIndicesDtwBC;
                    legTextY1 = 'Mean Conventional Therapy';
                    legTextY2 = 'Mean BridgeT';
                    legTextW  = 'Warped Mean BridgeT';
                case 'br'
                    data_y1 = obj.subject.primaryOutcome(i_mov).meanMVC_rob(:,i_mus);
                    data_y2 = obj.subject.primaryOutcome(i_mov).meanMVC_bri(:,i_mus);
                    ind_y2 = obj.subject.primaryOutcome(i_mov).errorIndicesDtwBR;
                    legTextY1 = 'Mean Teach Therapy';
                    legTextY2 = 'Mean BridgeT';
                    legTextW  = 'Warped Mean BridgeT';
                otherwise
                    msgID = 'emg_plt:inputError';
                    msgText = 'Could not resolve Type. type = rc/bc/br!';
                    throw(MException(msgID,msgText))
            end
            
            data_x = linspace(0,100,length(data_y1));
            
            obj.ploth{i_ax,1} = line(obj.axh(i_ax),...
            data_x,data_y1,'Color','Black','LineStyle','-','LineWidth',1.5);
            obj.legtext{i_ax,1} = legTextY1;

            obj.ploth{i_ax,2} = line(obj.axh(i_ax),...
                data_x,data_y2,'Color',[135/255,206/255,250/255],'LineStyle','-','LineWidth',1.5);
            obj.legtext{i_ax,2} = legTextY2;
            
            if boolDeform
                obj.ploth{i_ax,3} = line(obj.axh(i_ax),...
                data_x,data_y2(ind_y2),'Color',[135/255,206/255,250/255],'LineStyle','-.','LineWidth',1.5);
                obj.legtext{i_ax,3} = legTextW;
            else
                hold on
                for i=1:60:length(data_y1)
                    line([100*i/length(data_y1), 100*ind_y2(i)/length(data_y1)],[data_y1(i),data_y2(ind_y2(i))],'Color','Black');
                end
            end
            
            xlabel('Time [%]'); ylabel('MVC Normed EMG Amplitude');
            
            obj.makeLegend(i_ax) = true;
            title(['DTW Error: ',obj.getFullName(n_mov),', ',obj.getFullName(n_mus)])
        
        end
        %% Draw plots and axes
        function obj = draw(obj,linkAxes,row,col)
            n_axes = length(obj.axh);
            if nargin == 2
                row = n_axes;
                col = 1;
            end
            if nargin == 4&&(row*col<n_axes)
                row = n_axes;
                col = 1;
            end
            
            for i_ax=1:n_axes
                subplot(row,col,i_ax,obj.axh(i_ax))
                if obj.makeLegend(i_ax)
                    try
                        notEmpty = find(~cellfun(@isempty,obj.legtext(i_ax,:)));
                        legend([obj.ploth{i_ax,notEmpty}],obj.legtext{i_ax,notEmpty},'Location','Best')
                    catch
                        warning('Legend error: Did you define a legend?')
                    end
                end
            end
            
            if linkAxes
                linkaxes(obj.axh,'y')
            end
            set(gcf,'Visible','on');
            screenSize = get(0,'ScreenSize');
            set(gcf,'OuterPosition',[0,0,screenSize(3:4)]);
            
        end
        
        %% Delete specified axis
        function obj = remAxis(obj,numAx)
            delete(obj.axh(numAx));
            n_axes = length(obj.axh);
            keepAx = true(n_axes,1);
            keepAx(numAx) = false;
            obj.axh = obj.axh(keepAx);
            obj.makeLegend = obj.makeLegend(keepAx);
            obj.legtext = obj.legtext(keepAx,:);
            obj.ploth = obj.ploth(keepAx,:);
        end
        
        %% Create new figure
        function obj = newFigure(obj)
            obj.axh = gobjects(0,0);
            obj.legtext = {};
            obj.figh = figure();
            obj.ploth = {};
            obj.makeLegend = [];
            obj.repetitionFlag = false;
            obj.compFlag = false;
        end
        
        %% Save to file
        function obj = save(obj,name)
            saveas(gcf,char(name));
        end
    end

   methods (Access = 'private', Static = true)

    %% Get full names for plot labeling
       function [f_name] = getFullName(s_name)
            switch s_name
                case 'abd'
                    f_name = 'Abduction';
                case 'ele'
                    f_name = 'Shoulder Flexion';
                case 'rot'
                    f_name = 'Shoulder Rotation';
                case 'fle'
                    f_name = 'Elbow Flexion';
                case 'mj1'
                    f_name = 'Multi Joint';
                case 'pd'
                    f_name = 'Posterior Deltoid';
                case 'ad'
                    f_name = 'Anterior Deltoid';
                case 'ut'
                    f_name = 'Upper Trapezius';
                case 'bb'
                    f_name = 'Biceps Brachii';
                case 'lt'
                    f_name = 'Lateral Triceps';
                case 'pm'
                    f_name = 'Pectoralis Major';
                case 'conb'
                    f_name = 'Conventional Baseline';
                case 'cont'
                    f_name = 'Conventional Therapy';
                case 'robb'
                    f_name = 'Teach/BridgeT Baseline';
                case 'robt'
                    f_name = 'Teach Therapy';
                case 'bri'
                    f_name = 'BridgeT';
            end
        end
    end     
end
    