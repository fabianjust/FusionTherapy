%emg_data
%
%Created by David Mauderli - 2019
%
%DESCRIPTION: This class simulates EMG measurments as generated by the
%Noraxon EMG measurment system
%
%USAGE:
%   1.) Specify measurment time and sampling frequency by constructor
%   2.) Simulate emg signals with simulate()
%   3.) Save emg signals with save()

classdef emg_data < handle
    properties 
        T
        samplingRate
        channelNames
        Data
        noChans
        length_sec
    end
    methods
        
        
        %% Constructor
        %double Fs: Sampling frequency (2000Hz)
        %double duration: Recording duration
        function obj = emg_data(Fs,duration)
            if nargin == 0
                obj.T = NaN;
                obj.samplingRate = NaN;
            else
                obj.T = duration;
                obj.samplingRate = Fs;
            end
        end
        
        %% FUNCTION: SIMULATE
        %INPUT:
        %cell<function handle>(1,5): Cell array that contains function
        %handles. The functions specify how time is mapped to emg-amplitude
        function obj = simulate(obj,fcn_hndls,boolMvc)
        
            % Channel names: Description of data channels
            obj.channelNames{1,1} = 'Time';
            obj.channelNames{1,2} = 'UPPER TRAP. RT, uV';
            obj.channelNames{1,3} = 'POST.DELTOID RT, uV';
            obj.channelNames{1,4} = 'ANT.DELTOID RT, uV';
            obj.channelNames{1,5} = 'PECT. MAJOR RT, uV';
            obj.channelNames{1,6} = 'BICEPS BR. RT, uV';
            obj.channelNames{1,7} = 'LAT. TRICEPS RT, uV';
            obj.channelNames{1,8} = 'Noraxon AIS.4, uV';
            obj.channelNames{1,9} = 'Noraxon Ultium.Sync, On';
            obj.channelNames{1,10} = 'Noraxon AIS.Sync, On';

            %Generate data vector:
            %Time cell
            t_vec = (0:(1/obj.samplingRate):obj.T)';
            obj.Data{1,1} = t_vec;
            %Muscle measurment cells
            for i=1:6
                obj.Data{1,i+1} = fcn_hndls{i}(t_vec);
                if size(obj.Data{1,i+1},2)~= 1
                    obj.Data{1,i+1} = obj.Data{1,i+1}';
                end
            end
            if boolMvc
                obj.Data{1,8} = 10000*zeros(size(t_vec,1),1);
                obj.Data{1,9} = obj.Data{1,8};
                obj.Data{1,10} = obj.Data{1,8};
            else
            %Sync signals cells
            obj.Data{1,8} = 10000*ones(size(t_vec,1),1);
            obj.Data{1,9} = obj.Data{1,8};
            obj.Data{1,10} = obj.Data{1,8};
            end
            
            %Generate remaining variables: number of channels and rec.
            %length
            obj.noChans = 9;
            obj.length_sec = obj.T;
            
            %Append zeros at start and end (The bridged postprocessing code
            %requires the EMG signal to be longer than the mocap signal)
            if~boolMvc
                for i = 1:10
                    obj.Data{1,i} = [zeros(1000,1);obj.Data{1,i};zeros(1000,1)];
                end
            end
        end
            
        %% FUNCTION SAVE
        % Saves simulation to a .mat file
        function obj = save(obj,PATH,FNAME)
            channelNames = obj.channelNames;
            Data = obj.Data;
            samplingRate = obj.samplingRate;
            noChans = obj.noChans;
            length_sec = obj.length_sec;
            
            save([PATH, '\', FNAME],...
                'channelNames','Data','samplingRate','noChans','length_sec');
        end
    end
end