%prepare_measurment_data
%
%Author: David Mauderli - 2019
%
%DESCRIPTION: This function collects matching emg-mocap filepaths.
%-It creates a structure array of matching measurment data: emg-path,
%mocap-path, condition-name, movement-name
%-Additionally it outputs a structure array of matching MVC data: emg-path,
%muscle-name, mvc-test-name
%-Lastly it outputs the paths of mocap calibration files
%
%INPUT:
%char SUBJECT: Folder path of test subject
%struct metainfo: metainfo structure generated by new_subject().
%
%OUTPUT:
%measurments: structure array containing matching measurment files
%mvcs: structure array containing mvc filepaths
%MOC_CAL: Mocap calibration position filepath
%MOC_JCT: Mocap jointcenter calibration filepath

function [measurments,mvcs,ref] = collect_files(SUBJECT,metainfo)

%% 1.) Check if EMG folder exists
EMG = strcat(SUBJECT,'\emg'); %EMG folder
if(~isfolder(EMG))
    msgID = 'collect_files:missing_folder';
    msg = [strrep(EMG,'\','\\'), ' does not exist!'];
    throw(MException(msgID,msg))
end

%% 2.) Check if EMG MVC files exist and write a structure array that contains
%the filepaths, corresponding mvc name and mvc muscle
for i_mus=1:length(metainfo.muscle)
    %Write the structure array
    mvcs(i_mus).name = metainfo.muscle(i_mus).mvc;
    mvcs(i_mus).muscle = metainfo.muscle(i_mus).name;
    for i_rep = 1:3 % Anzahl Messungen MVC
        number = int2str(i_rep);
        CURR_MVC = [EMG,'\emg_mvc_',mvcs(i_mus).name,number,'_S',metainfo.snum,'.mat'];
        %Check if the designated mvc file for the current muscle exists
        if(~exist(CURR_MVC))
            msgID = 'collect_files:missing_mvc';
            msg = [strrep(CURR_MVC,'\','\\'), ' does not exist!'];
            throw(MException(msgID,msg))
        end
        mvcs(i_mus).MVC(i_rep).Repetition = CURR_MVC;
    end
end

%% 3.) Check if mocap folder exists
MOCAP = strcat(SUBJECT,'\mocap'); %MoCap folder
if(~isfolder(MOCAP))
    msgID = 'collect_files:missing_folder';
    msg = [strrep(MOCAP,'\','\\'), ' does not exist!'];
    throw(MException(msgID,msg))
end



%% 4.) Check and collect all emg and mocap measurment files

%Iterate over all movements and conditions. For each combination of i&j:
%   -Check if EMG File exists
%   -Check if MOCAP File exists
%   -Save EMG&MOCAP that match to a structure array and add movement and
%   condition names
n_cons = length(metainfo.cons); %Number of conditions
measurments = struct(); %Allocate output struct

%Iterate over movements
for i = 1:size(metainfo.movs,2)
    ignore_mov = false; %Set ignore movement flag to false
    
    %Iterate over conditions
    for j=1:n_cons
        %Check if emg measurment file exists. If it doesn't ask user how to
        %proceed
        EMG_FNAME = [EMG,'\emg_',metainfo.movs{1,i},'_',metainfo.cons{j},...
            '_S',metainfo.snum,'.mat'];
        if(~exist(EMG_FNAME))
            ignore_mov = true;
            msg = [strrep(EMG_FNAME,'\','\\'), ' does not exist! How would you like to proceed?'];
            answer = questdlg(msg,'Missing file',...
                'Ignore Movement','Stop Analysis','Select File Manually','Ignore Movement');
            switch answer
                case 'Ignore Movement'
                    %Set movement ignore flag to true -->Skip this movement
                    ignore_mov = true;
                    break
                case 'Stop Analysis'
                    %Crash program
                    msgID = 'collect_Data:missing_file';
                    msg = [strrep(EMG_FNAME,'\','\\'), ' does not exist!'];
                    throw(MException(msgID,msg))
                case 'Select File Manually'
                    %Manually select a replacement file
                    [filename,pathname,~]=uigetfile('*.mat','Select the MAT file')
                    EMG_FNAME = [pathname filename]
                    assert(exist(EMG_FNAME)~=0,'collect_files:path_error',...
                        [strrep(EMG_FNAME,'\','\\') ' does not exist'])
            end
        end
        
        %Repeat the same for mocap files
        MOC_FNAME = [MOCAP,'\moc_',metainfo.movs{1,i},'_',metainfo.cons{j},...
            '_S',metainfo.snum,'.csv'];
        if(~exist(MOC_FNAME))
            ignore_mov = true;
            msg = [strrep(MOC_FNAME,'\','\\'), ' does not exist! How would you like to proceed?'];
            answer = questdlg(msg,'Missing file',...
                'Ignore Movement','Stop Analysis','Select File Manually','Ignore Movement');
            switch answer
                case 'Ignore Movement'
                    %Set movement ignore flag --> ignore movement 
                    ignore_mov = true;
                    break
                case 'Stop Analysis'
                    %Crash program
                    msgID = 'collect_Data:missing_file';
                    msg = [strrep(MOC_FNAME,'\','\\'), ' does not exist!'];
                    throw(MException(msgID,msg))
                case 'Select File Manually'
                    %Manually select replacement file
                    [filename,pathname,~]=uigetfile('*.csv','Select the CSV file');
                    MOC_FNAME = [pathname filename]
                    assert(exist(MOC_FNAME)~=0,'collect_files:path_error',...
                        [strrep(MOC_FNAME,'\','\\') ' does not exist'])
            end
        end
        
        %Write path to output vector (wether it exists or not!!)
        measurments(n_cons*(i-1)+j).EMG_FNAME=EMG_FNAME;
        measurments(n_cons*(i-1)+j).MOC_FNAME=MOC_FNAME;
        measurments(n_cons*(i-1)+j).condition = metainfo.cons{j};
        measurments(n_cons*(i-1)+j).movement = metainfo.movs{1,i};
        
    end
    
    %If ignore_mov flag is true, set ignore field to true for the whole movement.
    for j=1:n_cons
        if(ignore_mov)
            measurments(n_cons*(i-1)+j).ignore = true;
        else
            measurments(n_cons*(i-1)+j).ignore = false;
        end
    end
end

%Clear all elements of output vector that have true ignore flag
measurments = measurments(~[measurments.ignore]);

%% 5.) Check if mocap Calibration and Jointcenter exist
% Note: If Reference and/or Jointcenter are missing, the code can still
% run. --> Set ignore flag to true. Nevertheless, jointangles will not be
% computed
ref.MOC_CAL = strcat(MOCAP,'\moc_Calibration_S',metainfo.snum,'.csv');
ref.MOC_JCT = strcat(MOCAP,'\moc_Jointcenter_S',metainfo.snum,'.csv');
if((~exist(ref.MOC_CAL))||~exist(ref.MOC_JCT))
    
    answer = questdlg('Missing Jointcenter and/or Calibration File. Continue?',...
                'Missing Files','Yes','No','No')
    switch answer
        case 'No'
            msgID = 'collect_files:missing_reference';
            msg = ['Reference Files are missing'];
            error(msgID,msg);
        otherwise
            warning('Reference Files Ignored!')
    end
end
end
